io = import("io");

# Function to calculate the n-th Fibonacci Sequence term.
function fibo(arg num_iterations: int[0..=100] = 0) -> int[0..=fibo(100)]: pure {
    var prev: int = 1;
    var prev_prev: int = 0;

    for (let i: int = 0..=num_iterations) {
        prev, prev_prev = prev + prev_prev, prev;
    }

    return prev;
}

print("The 10th Fibonacci Number is:", fibo(10));
_, blah = (10, 11);


# Harder Tokens to Parse
	# Tab
## Multiple Comment Characters

# Escape Characters
`This is some type of string`;
'This is some type of string';
"Escape characters: \'\n\t\"";

# Grouped Single-Characters
# Not sure what () or (_) will represent...
({[]}),(),{},[],(()),{{}},[[]];;;;

# Floating Point Numbers
0.0 # Should tokenize: 0.0
0.0e+1
.0
0

# Numbers
# Integers
10101010101010101010 # Testing Comment
# Test all digits
0
1
2
3
4
5
6
7
8
9
# Test multiple digits
10
100
1234567890
00	# Invalid
020	# Invalid
1a2	# Invlaid

# Test 0x...
0x	# Invalid
0x0
0x00
0x0123456789
0x1234567890
0xabcdef
0xABCDEF
0xabcdefg	# Invalid
0xABCDEFG	# Invalid

# Test 0o...
0o
0o0
0o00
0o01234567
0o012345678	# Invalid

# Test 0b...
0b	# Invalid
0b0
0b00
0b10
0b01
0b012	# Invalid

# Floats
. 	# Invalid
0.0
.0
0.
00.	# Invalid
100.
123E45
012E34	# Invalid (leading 0)
.0E+100


# Parsing . vs .. (I am not sure how to do this without backtracking for floats?)
# Maybe disallow float..=NUMBER???
0..=10;
0...=+10; # Should tokenize: 0 ... = +10 ;


# Punctuation (No real idea what to test here)
+++10===1000;
===-10+10;
!@@#$@%@#%^@$###^$^##^!@$^@#$ 	 # Commented out
